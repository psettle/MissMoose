/*
This software is subject to the license described in the file: License Agreement for ANT SoftDevice and Associated Software.txt
included with this software distribution. You may not use this file except in compliance with this license.

Copyright (c) Dynastream Innovations Inc. 2017
All rights reserved.
*/

#ifndef __ANT_BLAZE_NODE_INTERFACE_H__
#define __ANT_BLAZE_NODE_INTERFACE_H__

#include <stdint.h>
#include <stdbool.h>
#include "ant_stack_handler_types.h"
#include "ant_blaze_defines.h"

/** @brief Function for initializing the ANT BLAZE node library.
 *
 * The application must configure a handler for receiving messages from the ANT BLAZE library.
 * Only messages intended for this particular node are passed on to the application.
 * The application may optionally set a handler for receiving messages sent
 * directly to the device's master channel(s), and not sent over the flood mesh.
 * The application may optionally configure a handler for errors generated from the library.
 *
 * This function must be called before performing any other access to the library,
 * including configuration functions and starting operation of the ANT BLAZE node library.
 *
 * @param[in]   p_handler                 Function pointer to function for handling messages
 *                                        received by the ANT BLAZE Library.
 * @param[in]   p_backchannel_handler     Function pointer to function for handling messages
 *                                        sent to the master channel(s) run by the library.
 *                                        Set to NULL if unused.
 * @param[in]   p_error_handler           Function pointer to function for handling
 *                                        errors generated by the library.
 *                                        Set to NULL if unused.
 * @param[in]   p_license_key             Pointer to the license key needed to run the ANT BLAZE library.
 *                                        License keys are managed by Dynastream Innovations Inc. If an incorrect license key
 *                                        is used, the library will not function.
 * @retval NRF_SUCCESS                    Initialization was successful.
 * @retval NRF_ERROR_NOT_SUPPORTED        The library is not supported on this hardware platform.
 * @retval NRF_ERROR_RESOURCES            Not enough ANT channels have been enabled in the ANT stack to run the library.
 *                                        Ensure that at least ant_blaze_node_RESERVED_ANT_CHANNELS ANT channels are enabled. Check
 *                                        the parameters being passed to sd_ant_enable. If using the Nordic SDK, this would
 *                                        be in sdk_config.h.
 * @retval NRF_ERROR_INVALID_LICENSE_KEY  Invalid license key provided for the library.
 */
uint32_t ant_blaze_node_init(ant_blaze_rx_message_handler_t p_msg_handler, ant_evt_handler_t p_backchannel_handler, ant_blaze_lib_error_handler_t p_error_handler, const char* p_license_key);


/** @brief Function for configuring parameters of the ANT BLAZE library.
 *
 * This function must be called after ant_blaze_node_init, and before ant_blaze_node_start, to
 * configure the parameters of the ANT BLAZE library.
 * It can also be called after ant_blaze_node_start; changes will be applied on-the-fly.
 * The function may be called after ant_blaze_node_stop BUT ONLY after all channels
 * used by the library are closed.
 *
 * @param[in]   p_node_config             Library configuration parameters.
 *
 * @retval NRF_SUCCESS                    Initialization was successful.
 * @retval NRF_ERROR_NOT_SUPPORTED        The library is not supported in this hardware platform.
 * @retval NRF_ERROR_INVALID_PARAM        One of the supplied library parameters is invalid.
 * @retval NRF_ERROR_INVALID_LICENSE_KEY  Invalid license key provided for the library.
 */
uint32_t ant_blaze_node_config(ant_blaze_node_config_t* p_node_config);


/**@brief Starts operation of the ANT BLAZE library.
 *
 * This function must be called after configuring all library parameters to begin operation.
 * ANT channels will be opened as needed by the library to provide  functionality.
 *
 * @retval NRF_SUCCESS                    Operation successful.
 * @retval NRF_ERROR_NOT_SUPPORTED        The library is not supported in this hardware platform.
 * @retval NRF_ERROR_INVALID_STATE        Library is not configured, ensure calling ant_blaze_node_config prior to starting.
 *                                        This error code is also returned if the library had already been started.
 * @retval NRF_ERROR_INVALID_LICENSE_KEY  Invalid license key provided for the library.
 */
uint32_t ant_blaze_node_start(void);


/**@brief Halts operation of the ANT BLAZE library.
 *
 * This function can be used to stop the operation of the ANT BLAZE library.
 * All channels in use will be closed.
 *
 * @retval NRF_SUCCESS                    Initialization was successful.
 * @retval NRF_ERROR_NOT_SUPPORTED        The library is not supported in this hardware platform.
 * @retval NRF_ERROR_INVALID_STATE        Library is already stopped.
 * @retval NRF_ERROR_INVALID_LICENSE_KEY  Invalid license key provided for the library.
 */
uint32_t ant_blaze_node_stop(void);


/**@brief Process ANT channel events for the ANT BLAZE library.
 *
 * The application must react to ANT events in the main and then pass all
 * events for channels 0-ant_blaze_node_RESERVED_CHANNELS-1 to this module.
 * If the application is using other ANT channels, it can handle
 * the processing of events for those channels directly.
 * IMPORTANT: This function should not be called from interrupt context, as it involves
 * significant processing and may add undue delays.
 *
 * @param[in]   p_ant_evt                 Pointer to structure holding ANT event
 *
 * @retval NRF_SUCCESS                    Initialization was successful
 * @retval NRF_ERROR_NOT_SUPPORTED        The library is not supported in this hardware platform.
 * @retval NRF_ERROR_INVALID_LICENSE_KEY  Invalid license key provided for the library.
 */
uint32_t ant_blaze_node_process_channel_event(ant_evt_t* p_ant_evt);


/**@brief Timeout event needed for the ANT BLAZE library.
 *
 * Should be called every ant_blaze_node_TIMEOUT_INTERVAL ms.
 * IMPORTANT: This function should not be called from interrupt context.
 *
 * @retval NRF_SUCCESS                    Operation was successful.
 * @retval NRF_ERROR_NOT_SUPPORTED        The library is not supported in this hardware platform.
 * @retval NRF_ERROR_INVALID_LICENSE_KEY  Invalid license key provided for the library.
 */
uint32_t ant_blaze_node_process_timeout(void);


/**@brief Send message through the ANT BLAZE network.
 *
 * This function is used to generate a message in this node and send it to the gateway.
 * The address field of p_message does not need to be configured; the message is
 * automatically sent to the gateway with the address of this node as the source.
 *
 * The index field does not need to be populated when sending a message, as it is
 * populated by the library.
 *
 * Restrictions: The length of the message is limited to ant_blaze_node_MAX_MESSAGE_LENGTH.
 *
 * @param[in]   p_message                 Pointer to structure holding message to be sent.
 *
 * @retval NRF_ERROR_NOT_SUPPORTED        The library is not supported in this hardware platform.
 * @retval NRF_ERROR_INVALID_PARAM        An invalid message is provided (e.g. incorrect length).
 * @retval NRF_ERROR_INVALID_LICENSE_KEY  Invalid license key provided for the library.
 */
uint32_t ant_blaze_node_send_message(ant_blaze_message_t* p_message);


/**@brief Obtains version string of the ANT BLAZE Node Library
 * The version string follows the format BIPx.yBz
 * Where x is the major revision, y is a minor revision, and z is the build number.
 *
 * @param[in]   version_string            Pointer to buffer where the version string will be copied,
 *                                        the array should be at least 11 octets.
 *
 * @retval NRF_ERROR_NOT_SUPPORTED        The library is not supported in this hardware platform.
 * @retval NRF_ERROR_INVALID_LICENSE_KEY  Invalid license key provided for the library.
 */
uint32_t ant_blaze_node_get_version_string(char* version_string);


/**@brief Retrieves the current active frequency.
 *
 * @param[out]  p_freq                    Pointer to uint8_t where frequency should be stored.
 *
 * @retval NRF_SUCCESS                    Operation was successful.
 * @retval NRF_ERROR_NOT_SUPPORTED        The library is not supported in this hardware platform.
 * @retval NRF_INVALID_STATE              Mesh is not currently active
 * @retval NRF_ERROR_INVALID_LICENSE_KEY  Invalid license key provided for the library.
 */
uint32_t ant_blaze_node_get_current_scan_frequency(uint8_t* p_freq);


/**@brief Retrieves the number of nodes in range of this node.
 *
 * @param[out]  p_num_nodes               Pointer to uint16_t where the number of nodes in range should be stored.
 *
 * @retval NRF_SUCCESS                    Operation was successful.
 * @retval NRF_ERROR_NOT_SUPPORTED        The library is not supported in this hardware platform.
 * @retval NRF_ERROR_INVALID_LICENSE_KEY  Invalid license key provided for the library.
 */
uint32_t ant_blaze_node_get_number_of_nodes_in_range(uint16_t * p_num_nodes);


/**@brief Retrieves the current channel period in use on this node.
 *
 * @param[out]  p_channel_period          Pointer to uint16_t where channel period should be stored.
 *
 * @retval NRF_SUCCESS                    Operation was successful.
 * @retval NRF_ERROR_NOT_SUPPORTED        The library is not supported in this hardware platform.
 * @retval NRF_ERROR_INVALID_LICENSE_KEY  Invalid license key provided for the library.
 */
uint32_t ant_blaze_node_get_current_channel_period(uint16_t* p_channel_period);


/**@brief Assigns a node to a group.
 *
 * If assigned to a group, a node will process messages addressed
 * to that group address. A node can be assigned to up to
 * ant_blaze_node_MAX_GROUPS_PER_NODE groups.
 *
 * @param[in]   group_address             Group address to assign node to
 *
 * @retval NRF_SUCCESS                    Operation was successful.
 * @retval NRF_ERROR_NOT_SUPPORTED        The library is not supported in this hardware platform.
 * @retval NRF_ERROR_INVALID_PARAM        Invalid group address provided.
 * @retval NRF_ERROR_NO_MEM               Attempted to assign more than ant_blaze_node_MAX_GROUPS_PER_NODE on this node.
 * @retval NRF_ERROR_INVALID_STATE        Attempted to add a node to a group when groups are disabled.
 * @retval NRF_ERROR_INVALID_LICENSE_KEY  Invalid license key provided for the library.
 */
uint32_t ant_blaze_node_add_to_group(uint16_t group_address);


/**@brief Removes node from a group.
 *
 * @param[in]   group_address             Group address to unassign node from.
 *
 * @retval NRF_SUCCESS                    Operation was successful.
 * @retval NRF_ERROR_NOT_SUPPORTED        The library is not supported in this hardware platform.
 * @retval NRF_ERROR_INVALID_PARAM        Invalid group address provided.
 * @retval NRF_ERROR_INVALID_STATE        Attempted to remove a node from group when groups are disabled.
 * @retval NRF_ERROR_INVALID_LICENSE_KEY  Invalid license key provided for the library.
 */
uint32_t ant_blaze_node_remove_from_group(uint16_t group_address);


/**@brief Clears all configured groups.
 *
 * @retval NRF_SUCCESS                    Operation was successful.
 * @retval NRF_ERROR_NOT_SUPPORTED        The library is not supported in this hardware platform.
 * @retval NRF_ERROR_INVALID_LICENSE_KEY  Invalid license key provided for the library.
 */
uint32_t ant_blaze_node_remove_from_all_groups(void);


#endif // __ANT_BLAZE_NODE_INTERFACE_H__
